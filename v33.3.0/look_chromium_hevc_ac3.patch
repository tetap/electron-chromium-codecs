diff --git a/media/base/supported_types.cc b/media/base/supported_types.cc
index de9d4be3b92e8..6b9a60b07f44c 100644
--- a/media/base/supported_types.cc
+++ b/media/base/supported_types.cc
@@ -223,33 +223,7 @@ bool IsAudioCodecProprietary(AudioCodec codec) {
 #endif  // !BUILDFLAG(USE_PROPRIETARY_CODECS)
 
 bool IsHevcProfileSupported(const VideoType& type) {
-  if (!IsColorSpaceSupported(type.color_space))
-    return false;
-
-#if BUILDFLAG(ENABLE_PLATFORM_HEVC)
-#if BUILDFLAG(PLATFORM_HAS_OPTIONAL_HEVC_SUPPORT)
-#if BUILDFLAG(IS_CHROMEOS_LACROS)
-  // TODO(b/171813538): For Lacros, the supplemental profile cache will be
-  // asking lacros-gpu, but we will be doing decoding in ash-gpu. Until the
-  // codec detection is plumbed through to ash-gpu we can do this extra check
-  // for HEVC support.
-  if (base::CommandLine::ForCurrentProcess()->HasSwitch(
-          switches::kLacrosEnablePlatformHevc)) {
-    return true;
-  }
-#endif  // BUILDFLAG(IS_CHROMEOS_LACROS)
-#if BUILDFLAG(IS_CHROMEOS_ASH)
-  if (!base::FeatureList::IsEnabled(kPlatformHEVCDecoderSupport)) {
-    return false;
-  }
-#endif  // BUILDFLAG(IS_CHROMEOS_ASH)
-  return GetSupplementalProfileCache()->IsProfileSupported(type.profile);
-#else
-  return true;
-#endif  // BUIDFLAG(PLATFORM_HAS_OPTIONAL_HEVC_SUPPORT)
-#else
-  return false;
-#endif  // BUILDFLAG(ENABLE_PLATFORM_HEVC)
+  return true
 }
 
 bool IsVp9ProfileSupported(const VideoType& type) {
@@ -443,7 +417,7 @@ bool IsDefaultSupportedAudioType(const AudioType& type) {
 bool IsBuiltInVideoCodec(VideoCodec codec) {
 #if BUILDFLAG(ENABLE_FFMPEG_VIDEO_DECODERS) && BUILDFLAG(USE_PROPRIETARY_CODECS)
   if (codec == VideoCodec::kH264 &&
-      base::FeatureList::IsEnabled(kBuiltInH264Decoder)) {
+      base::FeatureList::IsEnabled(kBuiltInH264Decoder) || codec == VideoCodec::kHEVC) {
     return true;
   }
 #endif  // BUILDFLAG(ENABLE_FFMPEG_VIDEO_DECODERS) &&
diff --git a/media/ffmpeg/ffmpeg_common.cc b/media/ffmpeg/ffmpeg_common.cc
index 016137bcae694..1d7ce8b245fe4 100644
--- a/media/ffmpeg/ffmpeg_common.cc
+++ b/media/ffmpeg/ffmpeg_common.cc
@@ -134,6 +134,10 @@ AVCodecID AudioCodecToCodecID(AudioCodec audio_codec,
   switch (audio_codec) {
     case AudioCodec::kAAC:
       return AV_CODEC_ID_AAC;
+    case AudioCodec::kAC3:
+     return AV_CODEC_ID_AC3;
+    case AudioCodec::kEAC3:
+     return AV_CODEC_ID_EAC3;
     case AudioCodec::kALAC:
       return AV_CODEC_ID_ALAC;
     case AudioCodec::kMP3:
diff --git a/media/ffmpeg/scripts/build_ffmpeg.py b/media/ffmpeg/scripts/build_ffmpeg.py
index 3661b91740ae0..822b09149916f 100755
--- a/media/ffmpeg/scripts/build_ffmpeg.py
+++ b/media/ffmpeg/scripts/build_ffmpeg.py
@@ -987,9 +987,9 @@ def ConfigureAndBuild(target_arch, target_os, host_os, host_arch,
 
     # Google Chrome specific configuration.
     configure_flags['Chrome'].extend([
-        '--enable-decoder=aac,h264',
-        '--enable-demuxer=aac',
-        '--enable-parser=aac,h264',
+        '--enable-decoder=aac,h264,mp3,eac3,ac3,hevc,mpeg4,mpegvideo,mp2,mp1,flac',
+        '--enable-demuxer=aac,mp3,mov,dtshd,dts,avi,mpegvideo,m4v,h264,vc1,flac',
+        '--enable-parser=aac,h264,mpegaudio,mpeg4video,mpegvideo,ac3,h261,vc1,h263,flac',
     ])
 
     configure_flags['ChromeAndroid'].extend([
diff --git a/media/filters/ffmpeg_glue.cc b/media/filters/ffmpeg_glue.cc
index 229818059dc2c..b69cd7d3de302 100644
--- a/media/filters/ffmpeg_glue.cc
+++ b/media/filters/ffmpeg_glue.cc
@@ -164,6 +164,8 @@ const char* FFmpegGlue::GetAllowedAudioDecoders() {
         "mp3,pcm_s16be,pcm_s24be,pcm_mulaw,pcm_alaw");
 #if BUILDFLAG(USE_PROPRIETARY_CODECS)
     allowed_decoders += ",aac";
+    allowed_decoders += ",ac3";
+    allowed_decoders += ",eac3";
 #endif
     return allowed_decoders;
   }());
@@ -174,7 +176,14 @@ const char* FFmpegGlue::GetAllowedAudioDecoders() {
 const char* FFmpegGlue::GetAllowedVideoDecoders() {
   // This should match the configured lists in //third_party/ffmpeg.
 #if BUILDFLAG(USE_PROPRIETARY_CODECS) && BUILDFLAG(ENABLE_FFMPEG_VIDEO_DECODERS)
-  return IsBuiltInVideoCodec(VideoCodec::kH264) ? "h264" : "";
+  std::vector<std::string> allowed_decoders = {};
+  if (IsBuiltInVideoCodec(VideoCodec::kH264)) {
+    allowed_demuxers.push_back("h264");
+  } 
+   if (IsBuiltInVideoCodec(VideoCodec::kHEVC)) {
+    allowed_demuxers.push_back("hevc");
+  }
+  return base::JoinString(allowed_demuxers, ",");
 #else
   return "";
 #endif
diff --git a/media/filters/ffmpeg_video_decoder.cc b/media/filters/ffmpeg_video_decoder.cc
index 3f9cef0391af5..a1c20670b5c83 100644
--- a/media/filters/ffmpeg_video_decoder.cc
+++ b/media/filters/ffmpeg_video_decoder.cc
@@ -80,15 +80,15 @@ static int GetFFmpegVideoDecoderThreadCount(const VideoDecoderConfig& config) {
   // Only add more threads for those codecs that we know will benefit.
   switch (config.codec()) {
     case VideoCodec::kUnknown:
-    case VideoCodec::kVC1:
-    case VideoCodec::kMPEG2:
-    case VideoCodec::kHEVC:
-    case VideoCodec::kVP9:
-    case VideoCodec::kAV1:
-    case VideoCodec::kDolbyVision:
-    case VideoCodec::kTheora:
-    case VideoCodec::kMPEG4:
-    case VideoCodec::kVP8:
+    // case VideoCodec::kVC1:
+    // case VideoCodec::kMPEG2:
+    // case VideoCodec::kHEVC:
+    // case VideoCodec::kVP9:
+    // case VideoCodec::kAV1:
+    // case VideoCodec::kDolbyVision:
+    // case VideoCodec::kTheora:
+    // case VideoCodec::kMPEG4:
+    // case VideoCodec::kVP8:
       // We do not compile ffmpeg with support for any of these codecs.
       NOTREACHED();
 